{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from keras import Sequential\n",
    "from keras.layers import Dense\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from ann_visualizer_master.ann_visualizer.visualize import ann_viz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#store datasets\n",
    "dataset = pd.read_csv('all_twitter_parsed_data.csv')\n",
    "dataset_insta = pd.read_csv('parsed_insta_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# store input and output features\n",
    "X = dataset.iloc[:,0:4]\n",
    "y = dataset.iloc[:,4]\n",
    "\n",
    "X_insta = dataset_insta.iloc[:,0:4]\n",
    "y_insta = dataset_insta.iloc[:,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# stardise features\n",
    "sc = StandardScaler()\n",
    "X = sc.fit_transform(X)\n",
    "X_insta = sc.fit_transform(X_insta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#split twitter dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create classifier\n",
    "classifier = Sequential()\n",
    "\n",
    "#create layers\n",
    "classifier.add(Dense(4, activation='relu', kernel_initializer='random_normal', input_dim=4))\n",
    "classifier.add(Dense(8, activation='relu', kernel_initializer='random_normal'))\n",
    "classifier.add(Dense(1, activation='sigmoid', kernel_initializer='random_normal'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#compile nn\n",
    "classifier.compile(optimizer ='adam', loss='binary_crossentropy', metrics =['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "4777/4777 [==============================] - 0s 89us/step - loss: 0.6638 - acc: 0.6711\n",
      "Epoch 2/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.4715 - acc: 0.8147\n",
      "Epoch 3/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.3964 - acc: 0.8271\n",
      "Epoch 4/100\n",
      "4777/4777 [==============================] - 0s 34us/step - loss: 0.3610 - acc: 0.8396\n",
      "Epoch 5/100\n",
      "4777/4777 [==============================] - 0s 34us/step - loss: 0.3300 - acc: 0.8489\n",
      "Epoch 6/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.3019 - acc: 0.8587\n",
      "Epoch 7/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.2778 - acc: 0.8715\n",
      "Epoch 8/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.2557 - acc: 0.8849\n",
      "Epoch 9/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.2364 - acc: 0.9068\n",
      "Epoch 10/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.2217 - acc: 0.9167\n",
      "Epoch 11/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.2076 - acc: 0.9272\n",
      "Epoch 12/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1972 - acc: 0.9307\n",
      "Epoch 13/100\n",
      "4777/4777 [==============================] - 0s 34us/step - loss: 0.1869 - acc: 0.9343\n",
      "Epoch 14/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1785 - acc: 0.9376\n",
      "Epoch 15/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1712 - acc: 0.9414\n",
      "Epoch 16/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1641 - acc: 0.9426\n",
      "Epoch 17/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1583 - acc: 0.9445\n",
      "Epoch 18/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1534 - acc: 0.9470\n",
      "Epoch 19/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1493 - acc: 0.9485\n",
      "Epoch 20/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1451 - acc: 0.9502\n",
      "Epoch 21/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1401 - acc: 0.9531\n",
      "Epoch 22/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1373 - acc: 0.9554\n",
      "Epoch 23/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1345 - acc: 0.9562\n",
      "Epoch 24/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1328 - acc: 0.9571\n",
      "Epoch 25/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1303 - acc: 0.9577\n",
      "Epoch 26/100\n",
      "4777/4777 [==============================] - 0s 36us/step - loss: 0.1277 - acc: 0.9590\n",
      "Epoch 27/100\n",
      "4777/4777 [==============================] - 0s 38us/step - loss: 0.1253 - acc: 0.9592\n",
      "Epoch 28/100\n",
      "4777/4777 [==============================] - 0s 35us/step - loss: 0.1235 - acc: 0.9602\n",
      "Epoch 29/100\n",
      "4777/4777 [==============================] - 0s 36us/step - loss: 0.1222 - acc: 0.9609\n",
      "Epoch 30/100\n",
      "4777/4777 [==============================] - 0s 34us/step - loss: 0.1208 - acc: 0.9615\n",
      "Epoch 31/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1196 - acc: 0.9602\n",
      "Epoch 32/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1178 - acc: 0.9606\n",
      "Epoch 33/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1170 - acc: 0.9611\n",
      "Epoch 34/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1148 - acc: 0.9611\n",
      "Epoch 35/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1131 - acc: 0.9621\n",
      "Epoch 36/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1124 - acc: 0.9638\n",
      "Epoch 37/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1110 - acc: 0.9625\n",
      "Epoch 38/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1106 - acc: 0.9627\n",
      "Epoch 39/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1095 - acc: 0.9634\n",
      "Epoch 40/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1083 - acc: 0.9642\n",
      "Epoch 41/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1071 - acc: 0.9636\n",
      "Epoch 42/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1055 - acc: 0.9655\n",
      "Epoch 43/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1054 - acc: 0.9648\n",
      "Epoch 44/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1051 - acc: 0.9667\n",
      "Epoch 45/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1039 - acc: 0.9669\n",
      "Epoch 46/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1027 - acc: 0.9673\n",
      "Epoch 47/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1019 - acc: 0.9673\n",
      "Epoch 48/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.1005 - acc: 0.9676\n",
      "Epoch 49/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.1002 - acc: 0.9673\n",
      "Epoch 50/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0994 - acc: 0.9690\n",
      "Epoch 51/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0984 - acc: 0.9688\n",
      "Epoch 52/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0966 - acc: 0.9699\n",
      "Epoch 53/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0965 - acc: 0.9686\n",
      "Epoch 54/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0962 - acc: 0.9694\n",
      "Epoch 55/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0952 - acc: 0.9692\n",
      "Epoch 56/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0942 - acc: 0.9705\n",
      "Epoch 57/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0926 - acc: 0.9705\n",
      "Epoch 58/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0930 - acc: 0.9713\n",
      "Epoch 59/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0915 - acc: 0.9715\n",
      "Epoch 60/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0918 - acc: 0.9703\n",
      "Epoch 61/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0905 - acc: 0.9717\n",
      "Epoch 62/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0897 - acc: 0.9730\n",
      "Epoch 63/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0891 - acc: 0.9719\n",
      "Epoch 64/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0888 - acc: 0.9711\n",
      "Epoch 65/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0879 - acc: 0.9717\n",
      "Epoch 66/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0879 - acc: 0.9726\n",
      "Epoch 67/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0867 - acc: 0.9726\n",
      "Epoch 68/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0862 - acc: 0.9728\n",
      "Epoch 69/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0856 - acc: 0.9734\n",
      "Epoch 70/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0855 - acc: 0.9734\n",
      "Epoch 71/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0844 - acc: 0.9728\n",
      "Epoch 72/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0840 - acc: 0.9732\n",
      "Epoch 73/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0831 - acc: 0.9732\n",
      "Epoch 74/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0822 - acc: 0.9738\n",
      "Epoch 75/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0833 - acc: 0.9736\n",
      "Epoch 76/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0812 - acc: 0.9740\n",
      "Epoch 77/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0807 - acc: 0.9747\n",
      "Epoch 78/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0798 - acc: 0.9743\n",
      "Epoch 79/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0798 - acc: 0.9743\n",
      "Epoch 80/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0797 - acc: 0.9751\n",
      "Epoch 81/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0791 - acc: 0.9761\n",
      "Epoch 82/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0787 - acc: 0.9745\n",
      "Epoch 83/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0784 - acc: 0.9759\n",
      "Epoch 84/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0780 - acc: 0.9753\n",
      "Epoch 85/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0770 - acc: 0.9763\n",
      "Epoch 86/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0768 - acc: 0.9747\n",
      "Epoch 87/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0761 - acc: 0.9761\n",
      "Epoch 88/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0750 - acc: 0.9761\n",
      "Epoch 89/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0756 - acc: 0.9772\n",
      "Epoch 90/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0762 - acc: 0.9763\n",
      "Epoch 91/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0747 - acc: 0.9763\n",
      "Epoch 92/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0742 - acc: 0.9763\n",
      "Epoch 93/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0744 - acc: 0.9755\n",
      "Epoch 94/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0730 - acc: 0.9789\n",
      "Epoch 95/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0740 - acc: 0.9774\n",
      "Epoch 96/100\n",
      "4777/4777 [==============================] - 0s 33us/step - loss: 0.0734 - acc: 0.9782\n",
      "Epoch 97/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0731 - acc: 0.9778\n",
      "Epoch 98/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0733 - acc: 0.9778\n",
      "Epoch 99/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0721 - acc: 0.9780\n",
      "Epoch 100/100\n",
      "4777/4777 [==============================] - 0s 32us/step - loss: 0.0728 - acc: 0.9789\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1962ab25b00>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#train classifier\n",
    "classifier.fit(X_train, y_train, batch_size=20, epochs=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4777/4777 [==============================] - 0s 20us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.0705169153769994, 0.9778103412183379]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#show error\n",
    "eval_model = classifier.evaluate(X_train, y_train)\n",
    "eval_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get twitter values\n",
    "y_pred = classifier.predict(X_test)\n",
    "y_pred = (y_pred > 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Metrics \n",
      "\n",
      "Confusion Matrix: \n",
      "\n",
      "[[1002   22]\n",
      " [  30  994]] \n",
      "\n",
      "-------------------------------------------------------- \n",
      "\n",
      "Accuracy: 97.4609375 \n",
      "\n",
      "-------------------------------------------------------- \n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.98      0.97      1024\n",
      "           1       0.98      0.97      0.97      1024\n",
      "\n",
      "    accuracy                           0.97      2048\n",
      "   macro avg       0.97      0.97      0.97      2048\n",
      "weighted avg       0.97      0.97      0.97      2048\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#print twitter metrics\n",
    "print(\"Decision Tree Metrics \\n\")\n",
    "print(\"Confusion Matrix: \\n\")\n",
    "print(confusion_matrix(y_test, y_pred.round()), \"\\n\")\n",
    "print(\"-------------------------------------------------------- \\n\")\n",
    "print(\"Accuracy:\", (metrics.accuracy_score(y_test, y_pred))*100, \"\\n\")\n",
    "print(\"-------------------------------------------------------- \\n\")\n",
    "print(classification_report(y_test, y_pred.round()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get instagram values\n",
    "insta_pred = classifier.predict(X_insta)\n",
    "insta_pred = (insta_pred > 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Metrics \n",
      "\n",
      "Confusion Matrix: \n",
      "\n",
      "[[30  6]\n",
      " [ 0 36]] \n",
      "\n",
      "-------------------------------------------------------- \n",
      "\n",
      "Accuracy: 91.66666666666666 \n",
      "\n",
      "-------------------------------------------------------- \n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.83      0.91        36\n",
      "           1       0.86      1.00      0.92        36\n",
      "\n",
      "    accuracy                           0.92        72\n",
      "   macro avg       0.93      0.92      0.92        72\n",
      "weighted avg       0.93      0.92      0.92        72\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#print instagram metrics\n",
    "print(\"Decision Tree Metrics \\n\")\n",
    "print(\"Confusion Matrix: \\n\")\n",
    "print(confusion_matrix(y_insta, insta_pred.round()), \"\\n\")\n",
    "print(\"-------------------------------------------------------- \\n\")\n",
    "print(\"Accuracy:\", (metrics.accuracy_score(y_insta, insta_pred.round()))*100, \"\\n\")\n",
    "print(\"-------------------------------------------------------- \\n\")\n",
    "print(classification_report(y_insta, insta_pred.round()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1002</td>\n",
       "      <td>22</td>\n",
       "      <td>1024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30</td>\n",
       "      <td>994</td>\n",
       "      <td>1024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>1032</td>\n",
       "      <td>1016</td>\n",
       "      <td>2048</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted   0.0   1.0   All\n",
       "True                       \n",
       "0          1002    22  1024\n",
       "1            30   994  1024\n",
       "All        1032  1016  2048"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#labeled twitter cm\n",
    "pd.crosstab(y_test, y_pred.ravel().round(), rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>6</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>30</td>\n",
       "      <td>42</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted  0.0  1.0  All\n",
       "True                    \n",
       "0           30    6   36\n",
       "1            0   36   36\n",
       "All         30   42   72"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#labeled instagram cm\n",
    "pd.crosstab(y_insta, insta_pred.ravel().round(), rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create structure image\n",
    "#ann_viz(classifier, title=\"Binary_Classifer_NN_Diagram_2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
